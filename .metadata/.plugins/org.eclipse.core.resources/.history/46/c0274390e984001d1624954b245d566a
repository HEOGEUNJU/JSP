package kr.or.ddit.member.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import kr.or.ddit.db.ConnectionFactory;
import kr.or.ddit.vo.MemberVO;

public class MemberDAOImpl extends AbstractJDBCDAO implements MemberDAO {

   @Override
   public int insertMember(MemberVO member) {
      // TODO Auto-generated method stub
      return 0;
   }


   @Override
   public List<MemberVO> selectMemberList() {
      StringBuffer sql = new StringBuffer();
      //      1.
      sql.append(" SELECT  MEM_ID, MEM_NAME, MEpackage kr.or.ddit.member.dao;\r\n" + 
      		"\r\n" + 
      		"import java.beans.PropertyDescriptor;\r\n" + 
      		"import java.lang.reflect.Method;\r\n" + 
      		"import java.sql.Connection;\r\n" + 
      		"import java.sql.PreparedStatement;\r\n" + 
      		"import java.sql.ResultSet;\r\n" + 
      		"import java.sql.ResultSetMetaData;\r\n" + 
      		"import java.sql.SQLException;\r\n" + 
      		"import java.util.ArrayList;\r\n" + 
      		"import java.util.List;\r\n" + 
      		"\r\n" + 
      		"import org.apache.commons.text.CaseUtils;\r\n" + 
      		"\r\n" + 
      		"import kr.or.ddit.db.ConnectionFactory;\r\n" + 
      		"\r\n" + 
      		"\r\n" + 
      		"public abstract class AbstractJDBCDAO {\r\n" + 
      		"\r\n" + 
      		"   public <T> T selectOne(String sql, Class<T> resultType, Object...params) {\r\n" + 
      		"      try(\r\n" + 
      		"            Connection conn = makeConnection();\r\n" + 
      		"            PreparedStatement pstmt = makePreparedStatement(conn, sql);\r\n" + 
      		"      ){\r\n" + 
      		"         queryParameterSetting(pstmt, params);\r\n" + 
      		"         ResultSet rs = exeuteQuery(pstmt);\r\n" + 
      		"         T resultObject = null;\r\n" + 
      		"         if(rs.next()) {\r\n" + 
      		"            resultObject = resultBindingForOneRecord(rs, resultType);\r\n" + 
      		"         }\r\n" + 
      		"         return resultObject;\r\n" + 
      		"      }catch (SQLException e) {\r\n" + 
      		"         throw new RuntimeException(e);\r\n" + 
      		"      }\r\n" + 
      		"\r\n" + 
      		"   }\r\n" + 
      		"\r\n" + 
      		"   public <T> List<T> selectList(String sql, Class<T> resultType, Object...params) {\r\n" + 
      		"      try(\r\n" + 
      		"            Connection conn = makeConnection();\r\n" + 
      		"            PreparedStatement pstmt = makePreparedStatement(conn, sql);\r\n" + 
      		"            ){\r\n" + 
      		"         queryParameterSetting(pstmt, params);\r\n" + 
      		"         ResultSet rs = exeuteQuery(pstmt);\r\n" + 
      		"         List<T> list = new ArrayList<>();\r\n" + 
      		"         while(rs.next()) {\r\n" + 
      		"            T recordObject = resultBindingForOneRecord(rs, resultType);\r\n" + 
      		"            list.add(recordObject);\r\n" + 
      		"         }\r\n" + 
      		"         return list;\r\n" + 
      		"      }catch (SQLException e) {\r\n" + 
      		"         throw new RuntimeException(e);\r\n" + 
      		"      }\r\n" + 
      		"   }\r\n" + 
      		"\r\n" + 
      		"\r\n" + 
      		"   private Connection makeConnection() throws SQLException {\r\n" + 
      		"      return ConnectionFactory.getConnection();\r\n" + 
      		"\r\n" + 
      		"   }\r\n" + 
      		"\r\n" + 
      		"   // 쿼리 객체 생성\r\n" + 
      		"   private PreparedStatement makePreparedStatement(Connection conn, String sql) throws SQLException {\r\n" + 
      		"      return conn.prepareStatement(sql);\r\n" + 
      		"   }\r\n" + 
      		"\r\n" + 
      		"   private ResultSet exeuteQuery(PreparedStatement pstmt) throws SQLException {\r\n" + 
      		"      return pstmt.executeQuery();\r\n" + 
      		"   }\r\n" + 
      		"\r\n" + 
      		"   // hook method 형태로 \r\n" + 
      		"   public void queryParameterSetting(PreparedStatement pstmt, Object...params) throws SQLException {\r\n" + 
      		"      try {\r\n" + 
      		"         if(params.length>0) {\r\n" + 
      		"            for(int idx=0; idx<params.length; idx++) {\r\n" + 
      		"               Object param = params[idx];\r\n" + 
      		"               if(param.getClass().equals(int.class)) {\r\n" + 
      		"                  pstmt.setInt(idx+1, (Integer) param);\r\n" + 
      		"\r\n" + 
      		"               }else {\r\n" + 
      		"                  pstmt.setString(idx+1, param.toString());\r\n" + 
      		"               }\r\n" + 
      		"            }\r\n" + 
      		"         }\r\n" + 
      		"      }catch (Exception e) {\r\n" + 
      		"         throw new SQLException(e);\r\n" + 
      		"      }\r\n" + 
      		"   }\r\n" + 
      		"\r\n" + 
      		"   public <T> T resultBindingForOneRecord(ResultSet rs, Class<T> resultType) throws SQLException{\r\n" + 
      		"      try {\r\n" + 
      		"         T resultObject = resultType.newInstance();\r\n" + 
      		"         ResultSetMetaData rsmd = rs.getMetaData();\r\n" + 
      		"         int count = rsmd.getColumnCount();\r\n" + 
      		"         for(int idx=1; idx<=count; idx++) {\r\n" + 
      		"            // MEM_ID -> memId -> setMemId(rs.getString(\"MEM_ID\"))\r\n" + 
      		"            // MEM_MILEAGE -> memMileage-> setMemMileage(rs.getInt(\"MEM_MILEAGE\"))\r\n" + 
      		"            String columnName = rsmd.getColumnName(idx);\r\n" + 
      		"            String propertyName = CaseUtils.toCamelCase(columnName, false, '_');\r\n" + 
      		"            PropertyDescriptor pd = new PropertyDescriptor(propertyName, resultType);\r\n" + 
      		"            Method setter = pd.getWriteMethod();\r\n" + 
      		"            Class<?> propertyType = pd.getPropertyType();\r\n" + 
      		"            if(propertyType.equals(Integer.class)) {\r\n" + 
      		"\r\n" + 
      		"               // Integer\r\n" + 
      		"               setter.invoke(resultObject, rs.getInt(columnName));\r\n" + 
      		"\r\n" + 
      		"            }else {\r\n" + 
      		"\r\n" + 
      		"               // String\r\n" + 
      		"               setter.invoke(resultObject, rs.getString(columnName));\r\n" + 
      		"            }\r\n" + 
      		"         }\r\n" + 
      		"         return resultObject;\r\n" + 
      		"      } catch (Exception e) {\r\n" + 
      		"         throw new SQLException(e);\r\n" + 
      		"      }\r\n" + 
      		"   }\r\n" + 
      		"}M_ADD1, MEM_HP      ");
      sql.append("    , MEM_MAIL, MEM_MILEAGE                 ");
      sql.append(" FROM MEMBER                                    ");

      return selectList(sql.toString(), MemberVO.class);
   }

   @Override
   public MemberVO selectMember(String memId) {
      StringBuffer sql = new StringBuffer();
      sql.append(" SELECT                                                        ");
      sql.append("     MEM_ID,     MEM_PASS,   MEM_NAME,                         ");
      sql.append("     MEM_REGNO1, MEM_REGNO2,                                   ");
      sql.append("     TO_CHAR(MEM_BIR, 'YYYY-MM-DD') MEM_BIR,                   ");
      sql.append("     MEM_ZIP,    MEM_ADD1,   MEM_ADD2,                         ");
      sql.append("     MEM_HOMETEL,    MEM_COMTEL, MEM_HP,                       ");
      sql.append("     MEM_MAIL,   MEM_JOB,    MEM_LIKE,                         ");
      sql.append("     MEM_MEMORIAL,                                             ");
      sql.append("     TO_CHAR(MEM_MEMORIALDAY, 'YYYY-MM-DD') MEM_MEMORIALDAY,   ");
      sql.append("     MEM_MILEAGE,                                              ");
      sql.append("     MEM_DELETE                                                ");
      sql.append(" FROM    MEMBER                                                ");
      sql.append(" WHERE MEM_ID = ?                                              ");

      return selectOne(sql.toString(), MemberVO.class, memId);

   }

   @Override
   public int updateMember(MemberVO member) {
      // TODO Auto-generated method stub
      return 0;
   }



	@Override
	public int deletemember(String memId) {
		// TODO Auto-generated method stub
		return 0;
	}

}