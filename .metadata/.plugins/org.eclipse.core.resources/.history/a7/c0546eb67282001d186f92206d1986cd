package kr.or.ddit.db;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

/**
 * Factory Object[Method] Pattern
 *  : 필요 객체의 생성을 전담하는 객체를 별도 운영하는 구조.
 *
 */
public class ConnectionFactory { 
	private static String url = "";
	private static String user = "";
	private static String password = "";
	static {//코드블럭
		String path = "/kr/or/ddit/db/dbInfo.properties";
		
		
		 try(
			 InputStream is = ConnectionFactory.class.getResourceAsStream(path);
		 ) {
			 Properties dbInfo = new Properties();
			 dbInfo.load(is);
			 
	         Class.forName(dbInfo.getProperty("diverClassName"));
	      } catch (Exception e1) {
	         throw new RuntimeException(e1);
	      }
	}
	public static Connection getConnection() throws SQLException {
	     
	      Connection conn = DriverManager.getConnection(url, user, password);
	      return conn;
	}
}
